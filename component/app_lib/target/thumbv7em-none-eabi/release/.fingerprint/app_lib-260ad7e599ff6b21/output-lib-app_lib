{"$message_type":"diagnostic","message":"`match` arm body without braces","code":null,"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2749,"byte_end":2763,"line_start":105,"line_end":105,"column_start":26,"column_end":40,"is_primary":true,"text":[{"text":"                    1 => process_scan();       ","highlight_start":26,"highlight_end":40}],"label":"this statement is not surrounded by a body","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":2746,"byte_end":2748,"line_start":105,"line_end":105,"column_start":23,"column_end":25,"is_primary":false,"text":[{"text":"                    1 => process_scan();       ","highlight_start":23,"highlight_end":25}],"label":"while parsing the `match` arm starting here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"replace `;` with `,` to end a `match` arm expression","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":2763,"byte_end":2764,"line_start":105,"line_end":105,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"                    1 => process_scan();       ","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":",","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `match` arm body without braces\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:105:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    1 => process_scan();       \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis statement is not surrounded by a body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwhile parsing the `match` arm starting here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: replace `;` with `,` to end a `match` arm expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    1 => process_scan()\u001b[0m\u001b[0m\u001b[38;5;10m,\u001b[0m\u001b[0m       \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"can't pass `u8` to variadic function","code":{"code":"E0617","explanation":"Attempted to pass an invalid type of variable into a variadic function.\n\nErroneous code example:\n\n```compile_fail,E0617\n# use std::os::raw::{c_char, c_int};\nextern \"C\" {\n    fn printf(format: *const c_char, ...) -> c_int;\n}\n\nunsafe {\n    printf(\"%f\\n\\0\".as_ptr() as _, 0f32);\n    // error: cannot pass an `f32` to variadic function, cast to `c_double`\n}\n```\n\nCertain Rust types must be cast before passing them to a variadic function,\nbecause of arcane ABI rules dictated by the C standard. To fix the error,\ncast the value to the type specified by the error message (which you may need\nto import from `std::os::raw`).\n\nIn this case, `c_double` has the same size as `f64` so we can use it directly:\n\n```no_run\n# use std::os::raw::{c_char, c_int};\n# extern \"C\" {\n#     fn printf(format: *const c_char, ...) -> c_int;\n# }\n\nunsafe {\n    printf(\"%f\\n\\0\".as_ptr() as _, 0f64); // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":3067,"byte_end":3081,"line_start":111,"line_end":111,"column_start":88,"column_end":102,"is_primary":true,"text":[{"text":"                    _=> printf(\"Invalid opcode, recieved %d \\n\\0\".as_bytes().as_ptr(), command.opcode),","highlight_start":88,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"cast the value to `c_uint`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":3067,"byte_end":3081,"line_start":111,"line_end":111,"column_start":88,"column_end":102,"is_primary":true,"text":[{"text":"                    _=> printf(\"Invalid opcode, recieved %d \\n\\0\".as_bytes().as_ptr(), command.opcode),","highlight_start":88,"highlight_end":102}],"label":null,"suggested_replacement":"command.opcode as c_uint","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0617]\u001b[0m\u001b[0m\u001b[1m: can't pass `u8` to variadic function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:111:88\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    _=> printf(\"Invalid opcode, recieved %d \\n\\0\".as_bytes().as_ptr(), command.opcode),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: cast the value to `c_uint`: `command.opcode as c_uint`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0617`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0617`.\u001b[0m\n"}
